import Random from '../../random/generator/Random';
import Arbitrary from './definition/Arbitrary';
import Shrinkable from './definition/Shrinkable';
import { nat } from './IntegerArbitrary';

/** @hidden */
class OneOfArbitrary<T> extends Arbitrary<T> {
  readonly idArb: Arbitrary<number>;
  constructor(readonly arbs: Arbitrary<T>[]) {
    super();
    this.idArb = nat(arbs.length - 1);
  }
  generate(mrng: Random): Shrinkable<T> {
    const id = this.idArb.generate(mrng);
    return this.arbs[id.value].generate(mrng);
  }
}

/**
 * For one of the values generated by `arb0` or `...arbs` - `arb0` and `...arbs` are equiprobable
 *
 * @param arb0 One of the arbitrary that might be called to produce a value
 * @param arbs Other possible arbitraries
 */
function oneof<T>(arb0: Arbitrary<T>, ...arbs: Arbitrary<T>[]): Arbitrary<T> {
  return new OneOfArbitrary([arb0, ...arbs]);
}

export { oneof };
